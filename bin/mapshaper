#!/usr/bin/env node --nouse_idle_notification --expose_gc
//
// Running node with --nouse_idle-notification can improve performance significantly
// with large files. TODO: test that this is still true, since using fewer Arrays
// The gc() calls below are supposed to collect temp. objects from the previous
//   processing stage. Timing gc() gives an indication of overhead from memory management.
//

var mapshaper = require("../"),
    Node = mapshaper.Node,
    Utils = mapshaper.Utils,
    T = mapshaper.T;

var usage = ""
  + "Usage: $ mapshaper [options] file\n\n"
  + "Example: Use Douglas-Peucker to remove all but 10% of points in a Shapefile.\n"
  + "$ mapshaper --dp -p 0.1 counties.shp\n\n"
  + "Example: Use Visvalingam to simplify a Shapefile to 1km resolution.\n"
  + "$ mapshaper --vis -i 1000 states.shp"

var optimist = require("optimist"),
    opts;
optimist.usage(usage)

  .options("h", {
    alias: "help",
    describe: "show usage and options",
    'boolean': true
  })

  .options("o", {
    describe: "name of output file (with or without suffix)",
  })

  .options("f", {
    alias: "format",
    describe: "shapefile|geojson|topojson (defaults to input format)",
  })

  .options("dp", {
    describe: "Use Douglas-Peucker to simplify",
    'boolean': true
  })

  .options("vis", {
    describe: "Use Visvalingam to simplify",
    'boolean': true
  })

  .options("mod", {
    describe: "Use modified Visvalingam (default)",
    'boolean': true
  })

  .options("p", {
    alias: "pct",
    describe: "proportion of points to retain (0-1)"
  })

  .options("i", {
    alias: "interval",
    describe: "amount of simplification in meters (or other projected units)"
  })

  .options("k", {
    alias: "keep-shapes",
    describe: "prevent small shapes from disappearing",
    'boolean': true
  })

  .options("repair", {
    describe: "remove intersections introduced by simplification"
  })

  .options("precision", {
    describe: "round coordinates by an interval"
  })

  .options("q", {
    alias: "quantize",
    describe: "set topojson output resolution manually"
  })

  .options("t", {
    alias: "timing",
    describe: "show execution time of processing steps",
    'boolean': true
  })

  .options("v", {
    alias: "version",
    describe: "print mapshaper version",
    'boolean': true
  })

  /*

  // TODO
  // prevent points along straight lines from being stripped away, to allow reprojection
  .options("min-segment", {
    describe: "min segment length (no. of segments in largest dimension)",
    default: 0
  })

  .options("remove-null", {
    describe: "remove null shapes",
    default: false
  })

  .options("", {
    alias: "-",
    describe: "output to /dev/stdout",
    default: false
  })*/

  .check(function(argv) {
    if (argv.h) {
      optimist.showHelp();
      process.exit(0);
    }
    if (argv.v) {
      console.log(getVersion());
      process.exit(0);
    }
    opts = mapshaper.validateArgv(argv);
  })
  .argv;

T.verbose = opts.timing;
T.start("Start timing");

var importData = mapshaper.importFromFile(opts.input_file, opts),
    arcData = importData.arcs,
    bounds = arcData.getBounds();

// Update input/output format with information found during importing
// (command line info is insufficient to distinguish topojson and geojson)
opts.input_format = opts.input_format || importData.info.input_format || error("Missing input format");
opts.output_format = opts.output_format || opts.input_format;

if (opts.use_simplification) {
  mapshaper.simplifyPaths(arcData, opts.simplify_method);

  mapshaper.gc();

  if (opts.keep_shapes && importData.arcMinPointCounts) {
    mapshaper.protectRingsFromCollapse(arcData, importData.retainedPointCounts);
  }
}

if (opts.simplify_pct) {
  arcData.setRetainedPct(opts.simplify_pct);
} else if (opts.simplify_interval) {
  arcData.setRetainedInterval(opts.simplify_interval);
} else {
  // no simplification
}

if (opts.repair) {
  var xxInfo = mapshaper.findAndRepairIntersections(arcData);
  console.log("Repaired " + xxInfo.repaired + " intersections; " + xxInfo.post + " remaining");
}

var exports = mapshaper.exportContent(importData.layers, arcData, opts);

// Copy prj and dbf file, if both importing and exporting as shapefile
if (opts.output_format == 'shapefile' && opts.input_format == 'shapefile') {
  var prjFile = mapshaper.cli.replaceFileExtension(opts.input_file, 'prj'),
      dbfFile = mapshaper.cli.replaceFileExtension(opts.input_file, 'dbf'),
      shpFiles = Utils.filter(exports, function(o) {return o.extension == 'shp'});

  if (Node.fileExists(dbfFile) && shpFiles.length > 0) {
    // KLUDGE: assumes that the first layer contains the same shapes as the input
    exports.push({
      content: Node.readFile(dbfFile),
      extension: 'dbf',
      filebase: shpFiles[0].filebase
    });
  }

  if (Node.fileExists(prjFile)) {
    Utils.forEach(shpFiles, function(o) {
      exports.push({
        content: Node.readFile(prjFile, 'utf-8'),
        extension: 'prj',
        filebase: o.filebase
      });
    });
  }
}

var paths = mapshaper.getOutputPaths(exports, opts.output_directory, opts.output_extension);
Utils.forEach(exports, function(obj, i) {
  var path = paths[i];
  Node.writeFile(path, obj.content);
  console.log("Wrote " + path);
});

T.stop("Total time");


function getVersion() {
  try {
    var packagePath = Node.resolvePathFromScript("../package.json"),
        obj = JSON.parse(Node.readFile(packagePath, 'utf-8')),
        v = obj.version;
  } catch(e) {}
  return v || "";
}