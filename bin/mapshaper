#!/usr/bin/env node --nouse_idle_notification --expose_gc
//
// Running node with --nouse_idle-notification can improve performance significantly
// with large files. TODO: test that this is still true, since using fewer Arrays
// The gc() calls below are supposed to collect temp. objects from the previous
//   processing stage. Timing gc() gives an indication of overhead from memory management.
//

var mapshaper = require("../"),
    Visvalingam = mapshaper.Visvalingam,
    Node = mapshaper.Node,
    Utils = mapshaper.Utils,
    T = mapshaper.T;

var usage = ""
  + "Usage: $ mapshaper [options] file\n\n"
  + "Example: Use Douglas-Peucker to remove all but 10% of points in a Shapefile.\n"
  + "$ mapshaper --dp -p 0.1 counties.shp\n\n"
  + "Example: Use Visvalingam to simplify a Shapefile to 1km resolution.\n"
  + "$ mapshaper --vis -i 1000 states.shp"

var optimist = require("optimist");
optimist.usage(usage)

  .options("h", {
    alias: "help",
    describe: "show usage and options",
    'boolean': true
  })

  .options("o", {
    describe: "name of output file (with or without suffix)",
  })

  .options("f", {
    alias: "format",
    describe: "shapefile|geojson|topojson (defaults to input format)",
  })

  .options("dp", {
    describe: "Use Douglas-Peucker to simplify",
    'boolean': true
  })

  .options("vis", {
    describe: "Use Visvalingam to simplify",
    'boolean': true
  })

  .options("mod", {
    describe: "Use modified Visvalingam (default)",
    'boolean': true
  })

  .options("p", {
    alias: "pct",
    describe: "proportion of points to retain (0-1)"
  })

  .options("i", {
    alias: "interval",
    describe: "degree of simplification in units of distance"
  })

  .options("k", {
    alias: "keep-shapes",
    describe: "prevent small shapes from disappearing",
    'boolean': true
  })

  .options("t", {
    alias: "timing",
    describe: "show execution time of processing steps",
    'boolean': true
  })

  /*
  // Removing shp-test: not compatible with new topology function
  .options("shp-test", {
    describe: "test if .shp can be regenerated from topology",
    'boolean': true
  })

  // TODO
  // prevent points along straight lines from being stripped away, to allow reprojection
  .options("min-segment", {
    describe: "min segment length (no. of segments in largest dimension)",
    default: 0
  })

  .options("remove-null", {
    describe: "remove null shapes",
    default: false
  })

  .options("l", {
    alias: "log",
    describe: "write debugging information to <filename>.log",
    default: false
  })

  .options("v", {
    alias: "verbose",
    describe: "show verbose messages",
    default: false
  })

  .options("", {
    alias: "-",
    describe: "output to /dev/stdout",
    default: false
  })*/

  .check(function(argv) {
    if (argv.h) {
      optimist.showHelp();
      process.exit(0);
    }
    opts = mapshaper.validateArgv(argv);
  })
  .argv;

var info = {},
    opts;

T.verbose = opts.timing;
T.start("Start timing");

var importData = mapshaper.importFromFile(opts.input_file, opts.input_format),
    properties = importData.properties || null,
    topoData = mapshaper.buildTopology(importData), // obj.xx, obj.yy, obj.partIds, obj.shapeIds
    arcs = topoData.arcs,
    arcData = new mapshaper.ArcDataset(arcs);

Utils.extend(info, importData.info);
importData = null; // don't need this anymore, gc can take it.

if (opts.use_simplification) {
  var simplifyOpts = {
        spherical: mapshaper.geom.probablyDecimalDegreeBounds(info.input_bounds)
      },
      vertexData,
      calculator;

  if (opts.simplify_method == 'dp') {
    calculator = mapshaper.DouglasPeucker.calcArcData;
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else if (opts.simplify_method == 'vis') {
    var intervalScale = 0.65; // TODO: tune this constant (linear scale when converting Visv. area metric to distance units);
    calculator = Visvalingam.getArcCalculator(Visvalingam.standardMetric, Visvalingam.standardMetric3D, intervalScale);
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else if (opts.simplify_method == 'mod') {
    intervalScale = 0.65 // TODO: tune this
    calculator = Visvalingam.getArcCalculator(Visvalingam.specialMetric, Visvalingam.specialMetric3D, intervalScale);
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else {
    stop("Unknown simplification method:", method);
  }

  mapshaper.gc();

  if (opts.keep_shapes && topoData.arcMinPointCounts) {
    mapshaper.protectPoints(vertexData, topoData.arcMinPointCounts);
  }
  arcData.setThresholds(vertexData);
}

if (opts.simplify_pct) {
  arcData.setRetainedPct(opts.simplify_pct);
} else if (opts.simplify_interval) {
  arcData.setRetainedInterval(opts.simplify_interval);
} else {
  // no simplification
}

var exportOpts = {
  arcs: arcData,
  shapes: topoData.shapes,
  type: info.input_geometry_type
}
if (opts.output_format == "geojson") {
  exportOpts.properties = properties;
  var geojson = mapshaper.exportGeoJSON(exportOpts);
  Node.writeFile(opts.output_path_base + ".json", geojson);
}
else if (opts.output_format == 'topojson') {
  topojsonOpts = {
    arcs: arcData,
    bounds: arcData.getBounds(),
    objects: [{
      name: exportOpts.type + 's',
      type: exportOpts.type,
      shapes: exportOpts.shapes
    }]
  };
  var topojson = mapshaper.exportTopoJSON(topojsonOpts);
  Node.writeFile(opts.output_path_base + ".topojson", topojson);
}
else if (opts.output_format == "shapefile") {
  //var shpType = info.input_geometry_type == "polyline" ? 3 : 5;
  //var shpData = mapshaper.exportShp(topoData.arcs, topoData.shapes, shpType);jj
  var shpData = mapshaper.exportShp(exportOpts);

  var obase = opts.output_path_base,
      prjFile = opts.input_path_base + ".prj",
      dbfFile = opts.input_path_base + ".dbf";
  Node.writeFile(obase + ".shp", shpData.shp);
  Node.writeFile(obase + ".shx", shpData.shx);
  if (Node.fileExists(prjFile)) Node.copyFile(prjFile, obase + ".prj");
  if (Node.fileExists(dbfFile)) Node.copyFile(dbfFile, obase + ".dbf");
}

info.processing_time = T.stop("Total time");

// TODO: option to print a report based on data collected in info object.
