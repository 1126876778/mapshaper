#!/usr/bin/env node --nouse_idle_notification --expose_gc
//
// Running node with --nouse_idle-notification can improve performance significantly
// with large files. TODO: test that this is still true, since using fewer Arrays
// The gc() calls below are supposed to collect temp. objects from the previous
//   processing stage. Timing gc() gives an indication of overhead from memory management.
//

var mapshaper = require("../"),
    Visvalingam = mapshaper.Visvalingam,
    Node = mapshaper.Node,
    Utils = mapshaper.Utils,
    Opts = mapshaper.Opts,
    T = mapshaper.T;

var usage = ""
  + "Usage: $ mapshaper [options] file\n\n"
  + "Example: Use Douglas-Peucker to remove all but 10% of points in a Shapefile.\n"
  + "$ mapshaper --dp -p 0.1 counties.shp\n\n"
  + "Example: Use Visvalingam to simplify an unprojected Shapefile to 1km resolution.\n"
  + "$ mapshaper --vis -i 1000 -u states.shp"

var optimist = require("optimist");
optimist.usage(usage)

  .options("h", {
    alias: "help",
    describe: "show usage and options",
    'boolean': true
  })

  .options("o", {
    describe: "name of output file (with or without suffix)",
  })

  /*.options("f", {
    alias: "o-format",
    describe: "shapefile|geojson (defaults to input format)",
  })*/

  .options("dp", {
    describe: "Use Douglas-Peucker to simplify",
    'boolean': true
  })

  .options("vis", {
    describe: "Use Visvalingam to simplify",
    'boolean': true
  })

  .options("mod", {
    describe: "Use modified Visvalingam (default)",
    'boolean': true
  })

  .options("p", {
    alias: "pct",
    describe: "proportion of points to retain (0-1)"
  })

  .options("i", {
    alias: "interval",
    describe: "degree of simplification in units of distance"
  })

  .options("u", {
    alias: "unprojected",
    describe: "simplification uses 3D distance in meters",
    'boolean': true
  })

  .options("k", {
    alias: "keep-shapes",
    describe: "prevent small shapes from disappearing",
    'boolean': true
  })

  .options("t", {
    alias: "timing",
    describe: "show execution time of processing steps",
    'boolean': true
  })

  .options("shp-test", {
    describe: "test if .shp can be regenerated from topology",
    'boolean': true
  })

  /* // TODO
  // prevent points along straight lines from being stripped away, to allow reprojection
  .options("min-segment", {
    describe: "min segment length (no. of segments in largest dimension)",
    default: 0
  })

  .options("remove-null", {
    describe: "remove null shapes",
    default: false
  })

  // round coordinates so output is more compressible (most useful with topojson output)
  .options("q", {
    alias: "quantize",
    describe: "max number of distinct x-axis or y-axis coordinates",
  })

  .options("l", {
    alias: "log",
    describe: "write debugging information to <filename>.log",
    default: false
  })

  .options("v", {
    alias: "verbose",
    describe: "show verbose messages",
    default: false
  })

  .options("", {
    alias: "-",
    describe: "output to /dev/stdout",
    default: false
  })*/

  .check(function(argv) {
    if (argv.h) {
      optimist.showHelp();
      process.exit(0);
    }
    opts = mapshaper.validateArgv(argv);
  })
  .argv;

var info = {},
    opts;

T.verbose = opts.timing;
T.start("Start timing");

var importData = mapshaper.importFromFile(opts.input_file);
Opts.copyAllParams(info, importData.info);

var topoData = mapshaper.buildArcTopology(importData); // obj.xx, obj.yy, obj.partIds, obj.shapeIds
// Opts.copyAllParams(info, topoData)

importData = null; // don't need this anymore, gc can take it.

if (opts.use_simplification) {
  var vertexData,
      arcs = topoData.arcs,
      calculator;

  var simplifyOpts = {
    spherical: !!opts.use_sphere
  };

  if (opts.simplify_method == 'dp') {
    calculator = mapshaper.DouglasPeucker.calcArcData;
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else if (opts.simplify_method == 'vis') {
    var intervalScale = 0.65; // TODO: tune this constant (linear scale when converting Visv. area metric to distance units);
    calculator = Visvalingam.getArcCalculator(Visvalingam.standardMetric, Visvalingam.standardMetric3D, intervalScale);
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else if (opts.simplify_method == 'mod') {
    intervalScale = 0.65 // TODO: tune this
    calculator = Visvalingam.getArcCalculator(Visvalingam.specialMetric, Visvalingam.specialMetric3D, intervalScale);
    vertexData = mapshaper.simplifyArcs(arcs, calculator, simplifyOpts);
  }
  else {
    stop("Unknown simplification method:", method);
  }

  mapshaper.gc();

  if (opts.keep_shapes && topoData.arcMinPointCounts) {
    mapshaper.protectPoints(vertexData, topoData.arcMinPointCounts);
  }

  var thinned;
  if (opts.simplify_pct) {
    thinned = mapshaper.thinArcsByPct(topoData.arcs, vertexData, opts.simplify_pct);
  }
  else if (opts.simplify_interval) {
    thinned = mapshaper.thinArcsByInterval(topoData.arcs, vertexData, opts.simplify_interval);
  }
  topoData.arcs = thinned.arcs;
  Opts.copyAllParams(info, thinned.info);
}

mapshaper.gc();

if (opts.output_format == "geojson") {
  var geoJSON = mapshaper.exportGeoJSON(topoData);
  Node.writeFile(opts.output_path_base + ".json", geoJSON);
}
else if (opts.output_format == "shapefile") {
  var shpType = info.input_geometry_type == "polyline" ? 3 : 5;
  var shpData = mapshaper.exportShp(topoData.arcs, topoData.shapes, shpType);

  if (opts.shp_test) {
    // check if output .shp data is identical to input (e.g. to test for topology errors)
    var origShp = Node.readFile(opts.input_file),
      newShp = shpData.shp,
      identical = mapshaper.BinArray.buffersAreIdentical(origShp, newShp, true),
      msg = identical ?
        "\u001b[32m\u2713\u001b[0m Regenerated .shp is identical to original .shp" :
        "\u001b[31m\u2717\u001b[0m Regenerated .shp doesn't match original .shp";
    console.log(msg);
  }
  else {
    var obase = opts.output_path_base,
        prjFile = opts.input_path_base + ".prj",
        dbfFile = opts.input_path_base + ".dbf";
    Node.writeFile(obase + ".shp", shpData.shp);
    Node.writeFile(obase + ".shx", shpData.shx);
    if (Node.fileExists(prjFile)) Node.copyFile(prjFile, obase + ".prj");
    if (Node.fileExists(dbfFile)) Node.copyFile(dbfFile, obase + ".dbf");
  }
}

info.processing_time = T.stop("Total time");

// TODO: option to print a report based on data collected in info object.
