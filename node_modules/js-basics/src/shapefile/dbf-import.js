/* @requires dataview */




function DbfWriter() {

}


function DbfReader(buf) {
  var bin = this._bin = new BinArray(buf);
  this.header = this.readHeader(bin);
}

DbfReader.prototype.readAsArray = function() {
  var header = this.header,
    bin = this._bin,
    fields = header.fields,
    rows = header.recordCount;

  bin.position(header.headerSize);
  var src = this.getRecordSection();
  var offs = 0;
  var arr = [];
  for (var i=0; i<rows; i++) {
    var rec = {};
    offs += 1;
    arr.push(rec);
    for (var j=0, fieldCount=fields.length; j<fieldCount; j++) {
      var field = fields[j];
      var str = this.readFieldString(src, offs, field.length);
      offs += field.length;
      var val = this.parseField(str, field.parseType);
      rec[field.name] = val;
    }
  }

  return arr;
};

DbfReader.prototype.readAsDataTable = function() {
  var fields = this.header.fields;
  var table = new DataTable().startWaiting(); // set table to READY

  for (var i=0; i<fields.length; i++) {
    var field = fields[i];
    if (field.parseType) {
      var col = this.readColumn(field);
      table.insertFieldData(field.name, field.parseType, col);
    }
  }

  return table;
}


DbfReader.prototype.readColumn = function(field) {
  var byteArr = this.getRecordSection();
  var header = this.header,
    rows = header.recordCount,
    parseType = field.parseType,
    flen = field.length,
    recSize = header.recordSize;

  var col = [];
  var offs = field.columnOffset;
  for (var i=0; i<rows; i++, offs += recSize) {
    var str = this.readFieldString(byteArr, offs, flen);
    var val = this.parseField(str, parseType);
    col.push(val);
  }
  return col;
};


DbfReader.prototype.readFieldString = function(arr, start, len) {
  var str = "";
  for (var i=0; i<len; i++) {
    str += String.fromCharCode(arr[i + start]);
  }
  return str;
};



DbfReader.prototype.getRecordSection = function() {
  var buf = this._bin.buffer();
  var arr = new Uint8Array(buf, this.header.headerSize);
  return arr;
};

DbfReader.prototype.readRecord = function(i) {
  var offs = this.header.headerSize + i * this.header.recordSize;
  var bin = this._bin;
  bin.position(offs);
  var rec = bin.getCString(this.header.recordSize);
  return rec;
};

DbfReader.prototype.parseField = function(str, type) {
  str = Utils.trim(str);
  var val = null;
  if (type == C.STRING) {
    val = str;
  }
  else if (type == C.DOUBLE) {
    val = parseFloat(str);
  }
  else if (type == C.INTEGER) {
    val = parseInt(str, 10);
  }
  return val;
};

DbfReader.prototype.readHeader = function(bin) {
  var header = {
    version: bin.getInt8(),
    updateYear: bin.getUint8(),
    updateMonth: bin.getUint8(),
    updateDay: bin.getUint8(),
    recordCount: bin.getUint32(true),
    headerSize: bin.getUint16(true),
    recordSize: bin.getUint16(true),
    incompleteTransaction: bin.skipBytes(2) && bin.getUint8(),
    encrypted: bin.getUint8(),
    mdx: bin.skipBytes(12) && bin.getUint8(),
    language: bin.getUint8()
  };

  bin.skipBytes(2);

  header.fields = [];
  var colOffs = 1; // first column starts on second byte of record
  while(bin.peek() != 0x0D) {
    var field = this.readFieldHeader(bin);
    field.columnOffset = colOffs;
    colOffs += field.length;
    header.fields.push(field);
  }

  bin.position(header.headerSize);
  return header;
};


DbfReader.prototype.readFieldHeader = function(bin) {
  var field = {
    name: bin.getCString(11),
    type: String.fromCharCode(bin.getUint8()),
    address: bin.getUint32(true),
    length: bin.getUint8(),
    decimals: bin.getUint8(),
    id: bin.skipBytes(2) && bin.getUint8(),
    position: bin.skipBytes(2) && bin.getUint8(),
    indexFlag: bin.skipBytes(7) && bin.getUint8()
  };

  if (field.type == 'C') {
    field.parseType = C.STRING;
  } else if (field.type == 'N' && field.decimals > 0) {
    field.parseType = C.DOUBLE;
  } else if (field.type == 'I' || field.type == 'N') {
    field.parseType = C.INTEGER;
  }

  return field;
}